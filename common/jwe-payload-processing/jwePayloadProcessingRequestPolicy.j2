<!--
 ~ Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).
 ~
 ~ WSO2 LLC. licenses this file to you under the Apache License,
 ~ Version 2.0 (the "License"); you may not use this file except
 ~ in compliance with the License.
 ~ You may obtain a copy of the License at
 ~
 ~     http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~ Unless required by applicable law or agreed to in writing,
 ~ software distributed under the License is distributed on an
 ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~ KIND, either express or implied. See the License for the
 ~ specific language governing permissions and limitations
 ~ under the License.
 -->

<!-- Configurations required for JWE Response Encryption -->
<property name="jweEncryptionAlg" value="{{jweEncryptionAlg}}"/>
<property name="jweEncryptionMethod" value="{{jweEncryptionMethod}}"/>
<property name="jweEncryptionCertAlias" value="{{jweEncryptionCertAlias}}"/>

<class name="org.wso2.financial.services.apim.mediation.policies.jwe.processing.JwePayloadDecryptionMediator">
    <property name="jweEncryptionCertAlias" value="{{jweEncryptionCertAlias}}"/>
</class>

<!-- Storing the original request parameters for future reference -->
<property name="originalRequestJsonBody" expression="json-eval($)" scope="default" type="STRING"/>
<property name="originalAuthorizationTypeHeader" expression="$trp:Authorization"/>
<property name="originalContentType" expression="get-property('axis2', 'ContentType')"/>

<!-- Setting URI property to retrieve the client ID from the API context -->
<property name="uri.var.clientId" expression="$ctx:api.ut.consumerKey" type="STRING"/>

<!-- Disabling default behaviour of appending the sub request path to URL -->
<property name="REST_URL_POSTFIX" scope="axis2" action="remove"/>

<!-- Appending auth header required for the application service -->
<header name="Authorization" value="Basic {{applicationServiceBasicAuthCredentials}}" scope="transport"/>

<!-- Call the applications endpoint in blocking mode with the client ID to retrieve the app ID -->
<call blocking="true">
    <endpoint>
        <http method="GET" uri-template="{{identityServerBaseUrl}}/api/server/v1/applications?filter=clientId%20eq%20{uri.var.clientId}"/>
    </endpoint>
</call>

<!-- Extract application ID from the JSON response into a property -->
<property name="uri.var.appId" expression="json-eval($.applications[0].id)" scope="default" type="STRING"/>

<!-- Call the application endpoint in blocking mode with the application ID to retrieve the details of the application -->
<call blocking="true">
    <endpoint>
        <http method="GET" uri-template="{{identityServerBaseUrl}}/api/server/v1/applications/{uri.var.appId}"/>
    </endpoint>
</call>

<!-- Storing application data into a property to be used by the class mediator -->
<property name="applicationDataJsonString" expression="json-eval($)" scope="default" type="STRING"/>

<!-- Setting the original payload back -->
<payloadFactory media-type="json">
    <format>$1</format>
    <args>
       <arg evaluator="xml" expression="$ctx:originalRequestJsonBody"/>
    </args>
</payloadFactory>

<!-- Setting the original Auth header back -->
<header name="Authorization" expression="$ctx:originalAuthorizationTypeHeader" scope="transport"/>
